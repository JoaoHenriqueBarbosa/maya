#!/bin/bash

# Maya Framework Build Script
# 
# Usage:
#   ./build.sh [debug_tags]
#
# Examples:
#   ./build.sh                    # No logs (production)
#   ./build.sh reactive           # Debug reactive system (signal, effect, memo, computed)
#   ./build.sh render             # Debug rendering (paint, render, pipeline, etc)
#   ./build.sh signal,effect      # Debug specific tags
#   ./build.sh common             # Common debugging (app, ui, signal, effect)
#   ./build.sh all                # All debug logs (very verbose!)
#
# Predefined groups:
#   reactive - Signal, Effect, Memo, Computed
#   render   - Paint, Render, Pipeline, Update, DOM, Canvas
#   widget   - Widget, Text, Button
#   minimal  - Just App logs
#   common   - App, UI, Signal, Effect
#   all      - Everything

# Parse debug tags from command line
DEBUG_TAGS="${1:-}"

# Set environment variables based on debug tags
if [ -z "$DEBUG_TAGS" ]; then
    # No tags = silent mode
    export MAYA_LOG_LEVEL="silent"
    echo "üîá Building Maya Framework (Production Mode - No Logs)"
else
    # Enable debug mode with specified tags
    export MAYA_LOG_LEVEL="trace"
    export MAYA_LOG_CATEGORIES="$DEBUG_TAGS"
    
    echo "üîç Building Maya Framework (Debug Mode)"
    echo "   Debug tags: $DEBUG_TAGS"
    
    # Show which tags are enabled
    case "$DEBUG_TAGS" in
        reactive)
            echo "   üì° Debugging: Signal, Effect, Memo, Computed"
            ;;
        render)
            echo "   üé® Debugging: Paint, Render, Pipeline, Update, DOM, Canvas"
            ;;
        widget)
            echo "   üî≤ Debugging: Widget, Text, Button"
            ;;
        minimal)
            echo "   üìå Debugging: App only"
            ;;
        common)
            echo "   üîß Debugging: App, UI, Signal, Effect"
            ;;
        all)
            echo "   üî¨ Debugging: ALL SYSTEMS (Very Verbose!)"
            ;;
        *)
            echo "   üè∑Ô∏è  Custom tags: $DEBUG_TAGS"
            ;;
    esac
fi

echo ""

# Clean previous build
rm -f examples/simple/app.wasm

# Generate config file for WASM based on debug tags
CONFIG_FILE="internal/logger/config_wasm.go"
cat > $CONFIG_FILE << EOF
//go:build wasm
// +build wasm

package logger

// This file is auto-generated by build.sh
// DO NOT EDIT MANUALLY

func initConfig() {
EOF

if [ -z "$DEBUG_TAGS" ]; then
    # No debug = silent
    cat >> $CONFIG_FILE << EOF
	currentLevel = LevelSilent
	categories = map[string]bool{}
EOF
else
    # Debug mode with categories
    cat >> $CONFIG_FILE << EOF
	currentLevel = LevelTrace
	categories = map[string]bool{
EOF
    
    # Convert tags to uppercase and add to map
    IFS=',' read -ra TAGS_ARRAY <<< "$DEBUG_TAGS"
    for tag in "${TAGS_ARRAY[@]}"; do
        TAG_UPPER=$(echo "$tag" | tr '[:lower:]' '[:upper:]' | tr -d ' ')
        echo "		\"$TAG_UPPER\": true," >> $CONFIG_FILE
    done
    
    cat >> $CONFIG_FILE << EOF
	}
EOF
fi

echo "}" >> $CONFIG_FILE

# Build the WASM binary
GOOS=js GOARCH=wasm go build -o examples/simple/app.wasm examples/simple/main.go

if [ $? -eq 0 ]; then
    echo "‚úÖ Build successful!"
    echo ""
    echo "To run the example:"
    echo "  cd examples/simple && go run server.go"
    echo ""
    echo "Then open http://localhost:8080 in your browser"
    
    if [ ! -z "$DEBUG_TAGS" ]; then
        echo ""
        echo "üí° Tip: Open browser console to see debug logs"
    fi
else
    echo "‚ùå Build failed!"
    exit 1
fi